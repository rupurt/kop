#!/usr/bin/env bash

set -eo pipefail

source $SCRIPTS/common.sh

# @cmd Ensures configuration has been initialized
setup() {
	mkdir -p $LOCAL
}

# @cmd Ensures code is formatted and that tests pass
# @flag --format        Run formatters
# @flag --lint          Run ruff linter
# @flag --typecheck     Run typechecks
# @flag --test          Run tests
check() {
	flag_count=0
	[[ $argc_format -eq 1 ]] && flag_count+=1
	[[ $argc_lint -eq 1 ]] && flag_count+=1
	[[ $argc_typecheck -eq 1 ]] && flag_count+=1
	[[ $argc_test -eq 1 ]] && flag_count+=1
	if [[ $flag_count -eq 0 ]] || [[ $argc_format -eq 1 ]]; then
		runp "ruff format ."
	fi
	if [[ $flag_count -eq 0 ]] || [[ $argc_lint -eq 1 ]]; then
		runp "ruff format --check ."
	fi
	if [[ $flag_count -eq 0 ]] || [[ $argc_typecheck -eq 1 ]]; then
		runp "pyright"
	fi
	if [[ $flag_count -eq 0 ]] || [[ $argc_test -eq 1 ]]; then
		runp "pytest -vv --no-header src"
	fi
}

# @cmd Manage local k3d cluster
k3d() { :; }

# @cmd Create k3d cluster
k3d::create() {
	runp """
  k3d cluster create kop \
    --image rancher/k3s:v1.31.4-k3s1 \
    --k3s-arg '--disable=traefik@server:*' \
    --port '80:80@loadbalancer'
  """
}

# @cmd Delete k3d cluster
k3d::delete() {
	runp "k3d cluster delete kop"
}

# @cmd Start k3d cluster
k3d::start() {
	runp "k3d cluster start kop"
}

# @cmd Stop k3d cluster
k3d::stop() {
	runp "k3d cluster stop kop"
}

# @cmd Continuous development for kubernetes
skaffold() { :; }

# @cmd Continuous development for kafka pipeline
skaffold::kafka() { :; }

# @cmd Run kafka pipeline once
skaffold::kafka::run() {
	runp """
  skaffold run \
    --port-forward=user \
    -f skaffold.kafka.yaml
  """
}

# @cmd Generate manifests for kafka pipeline
skaffold::kafka::render() {
	runp """
  skaffold render \
    -f skaffold.kafka.yaml
  """
}

# @cmd Delete resources deployed by kafka pipeline
skaffold::kafka::delete() {
	runp """
  skaffold delete \
    -f skaffold.kafka.yaml
  """
}

# @cmd Continuous development for reactive pipeline
skaffold::reactive() { :; }

# @cmd Run reactive pipeline once
skaffold::reactive::run() {
	runp """
  skaffold run \
    --port-forward=user \
    -f skaffold.reactive.yaml
  """
}

# @cmd Generate manifests for reactive pipeline
skaffold::reactive::render() {
	runp """
  skaffold render \
    -f skaffold.reactive.yaml
  """
}

# @cmd Delete resources deployed by reactive pipeline
skaffold::reactive::delete() {
	runp """
  skaffold delete \
    -f skaffold.reactive.yaml
  """
}

# Parse args and apply them to the specified function
dev --ensure-devshell "$@"
